import createTask from "../../helpers/createTask.js";

let id = 0;

const lesson3 = {
    title: "–¶–∏–∫–ª–∏ –π —É–º–æ–≤–∏",
    order: 3,
    tasks: [
        createTask({
            desc: "–ó–∞–ø–∏—Ç–∞–π —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –π–æ–≥–æ –≤—ñ–∫ —ñ –≤–∏–∑–Ω–∞—á–∏, –∫–∏–º –≤—ñ–Ω —î: –¥–∏—Ç–∏–Ω–æ—é (0-11), –ø—ñ–¥–ª—ñ—Ç–∫–æ–º (12-17), –¥–æ—Ä–æ—Å–ª–∏–º (18_59) –∞–±–æ –ø–µ–Ω—Å—ñ–æ–Ω–µ—Ä–æ–º (60 ...), –ø–µ—Ä–µ–¥–±–∞—á –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–µ–≤—ñ—Ä–Ω–∏—Ö –¥–∞–Ω–∏—Ö.",
            inputs: [{name: "age", label: "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫: ", type: "number"}],
            callback: (task) => {

                const age = +task.getValue("age");

                if (age >= 0 && age <=11) task.output('–í–∏ –¥–∏—Ç–∏–Ω–∞ üë∂');
                if (age >= 12 && age <= 17) task.output('–í–∏ –ø—ñ–¥–ª—ñ—Ç–æ–∫ ü§°');
                if (age > 18 && age <= 59) task.output('–í–∏ –¥–æ—Ä–æ—Å–ª–∏–π üíÄ');
                if (age >= 60 ) task.output('–í–∏ —Å—Ç–∞—Ä–∏–π üíÄ');
            }
        }),

        createTask({
            desc: "–ó–∞–ø–∏—Ç–∞–π —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 9 —ñ –≤–∏–≤–µ–¥–∏ –π–æ–º—É —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª, —è–∫–∏–π —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∏–π –Ω–∞ —Ü—ñ–π –∫–ª–∞–≤—ñ—à—ñ (1 !, 2 @, 3 # —ñ —Ç. –¥).",
            inputs: [{name: "number", label: "–í–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä—É: ", type: "number"}],
            callback: (task) => {
                const symbols = ["!", "@", "#", "$", "%", "^", "&", "*", "(", ")"];
                
                const number = +task.getValue("number");

                task.output(symbols[number-1]);
            }
        }),
         
        createTask({
            desc: "–ü—ñ–¥—Ä–∞—Ö—É–π —Å—É–º—É –≤—Å—ñ—Ö —á–∏—Å–µ–ª –≤ –∑–∞–¥–∞–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ",
            inputs: [{name: "start", label: "–í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–æ–∫: ", type: "number"}, {name: "end", label: "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–Ω–µ—Ü—å: ", type: "number"}],
            callback: (task) => {                
                const start = +task.getValue("start");
                const end = +task.getValue("end");
                let res = "";

                for (let i = start; i <= end; i++) {
                    res += i !== end ? `${i}, ` : `${i}`;
                }

                task.output(res);
            }
        }),

        createTask({
            desc: "–ó–∞–ø–∏—Ç–∞–π —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 2 —á–∏—Å–ª–∞ —ñ –∑–Ω–∞–π–¥–∏ –Ω–∞–π–±—ñ–ª—å—à–∏–π —Å–ø—ñ–ª—å–Ω–∏–π –¥—ñ–ª—å–Ω–∏–∫.",
            inputs: [{name: "num1", label: "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ: ", type: "number"}, {name: "num2", label: "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ: ", type: "number"}],
            callback: (task) => {                
                let start = +task.getValue("num1");
                let end = +task.getValue("num2");

                while (end !== 0) {
                    let temp = end;
                    end = start % end;
                    start = temp;
                }

                task.output(start);
            }
        }),

        createTask({
            desc: "–ó–∞–ø–∏—Ç–∞–π —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø‚Äô—è—Ç–∏—Ä–æ–∑—Ä—è–¥–Ω–µ —á–∏—Å–ª–æ —ñ –≤–∏–∑–Ω–∞—á–∏, —á–∏ —î –≤–æ–Ω–æ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º.",
            inputs: [{name: "num", label: "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ: ", type: "number"}],
            callback: (task) => {                
                let num = task.getValue("num");

                if (num.length > 5 || num.length < 5) {
                    task.output("–ù–∞–ø–∏—Å–∞–Ω–æ –∂ –ø‚Äô—è—Ç–∏—Ä–æ–∑—Ä—è–¥–Ω–µ —á–∏—Å–ª–æ...");
                } else {
                    task.output(num.split("").reverse().join("") == num);
                }
            }
        }),

        createTask({
            desc: "–ó–∞–ø–∏—Ç–∞–π —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—É–º—É –ø–æ–∫—É–ø–∫–∏ —ñ –≤–∏–≤–µ–¥–∏ —Å—É–º—É –¥–æ –æ–ø–ª–∞—Ç–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: –≤—ñ–¥ 200 –¥–æ 300 - –∑–Ω–∏–∂–∫–∞ –±—É–¥–µ 3%; –≤—ñ–¥ 300 –¥–æ 500 - 5%; –≤—ñ–¥ 500 —ñ –≤–∏—â–µ - 7%",
            inputs: [{name: "sum", label: "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –ø–æ–∫—É–ø–∫–∏: ", type: "number"}],
            callback: (task) => {                
                let sum = +task.getValue("sum");
                let res = 0;

                if (sum >= 200 && sum < 300) {
                    res = (sum * 3) / 100;
                } else if (sum >= 300 && sum < 500) {
                    res = (sum * 5) / 100;
                } else if (sum >= 500) {
                    res = (sum * 7) / 100;
                } else {
                    res = sum;
                }

                task.output(sum - res);
            }
        }),

        createTask({
            desc: "–ó–∞–ø–∏—Ç–∞–π —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 10 —á–∏—Å–µ–ª —ñ –ø–æ—Ä–∞—Ö—É–π, —Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –≤–≤—ñ–≤ –¥–æ–¥–∞—Ç–Ω—ñ—Ö, –≤—ñ–¥‚Äô—î–º–Ω–∏—Ö —ñ –Ω—É–ª—ñ–≤. –ü—Ä–∏ —Ü—å–æ–º—É —Ç–∞–∫–æ–∂ –ø–æ—Ä–∞—Ö—É–π, —Å–∫—ñ–ª—å–∫–∏ –∑ –Ω–∏—Ö –ø–∞—Ä–Ω–∏—Ö —ñ –Ω–µ–ø–∞—Ä–Ω–∏—Ö. –í–∏–≤–µ–¥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –µ–∫—Ä–∞–Ω. –í—Ä–∞—Ö–æ–≤—É–π, —â–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –æ–¥–Ω—ñ—î—ó –∑–º—ñ–Ω–Ω–æ—ó (–Ω–µ 10) –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —á–∏—Å–µ–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.",
            inputs: [{name: "numbers", label: "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª: ", type: "number"}],
            callback: (task) => {                
                let numbers = task.getValue("numbers").split(" ");
                const stat = {
                    positive: 0,
                    negative: 0,
                    even: 0,
                    odd: 0,
                };

                numbers.forEach(item => {
                        if (item >= 0) {
                            stat.positive++;
                        } else {
                            stat.negative++;
                        }

                        if (item % 2 == 0) {
                            stat.even++;
                        } else {
                            stat.odd++;
                        }
                });

                task.output(`–î–æ–¥–∞—Ç–Ω—ñ—Ö: ${stat.positive}
                    –í—ñ–¥'—î–º–Ω–∏—Ö: ${stat.negative}
                    –ü–∞—Ä–Ω–∏—Ö: ${stat.even}
                    –ù–µ –ø–∞—Ä–Ω–∏—Ö: ${stat.odd}`);
            }
        }),

        createTask({
            desc: "–ó–∞—Ü–∏–∫–ª–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è —Ç–∞–∫–∏–º —á–∏–Ω–æ–º: ¬´–î–µ–Ω—å —Ç–∏–∂–Ω—è. –•–æ—á–µ—à –ø–æ–±–∞—á–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å? ¬ª —ñ —Ç–∞–∫ –¥–æ —Ç–∏—Ö –ø—ñ—Ä, –ø–æ–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î OK.",
            nameBtn: "–û–ö",
            callback: (task) => {                
                const day = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"];

                task.output(day[id]);
                id = id == day.length-1 ? 0 : id+1;
            }
        }),
    ]
};

export default function init() {
    return lesson3;
}